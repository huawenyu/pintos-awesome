       	       	    +---------------------------+
                    |          CS 101OS         |
                    | PROJECT 5: VIRTUAL MEMORY |
                    |      DESIGN DOCUMENT      |
                    +---------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Ilya Nepomnyashchiy <ilyanep@caltech.edu>
Daniel Chen <dychen@caltech.edu>
Atharv Vaish <avaish@caltech.edu>

>> Specify how many late tokens you are using on this assignment: 0 

>> What is the Git repository and commit hash for your submission?

   Repository URL: https://github.com/ilyanep/pintos-awesome 
   commit 9cb8351dcb0c72571f3115c2f6fd2cd4c74986e7

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			PAGE TABLE MANAGEMENT
			=====================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

enum vm_spt_type {
  SPTE_FS = 001,  // On the file system
  SPTE_SWAP = 002, // In swap 
  SPTE_ZERO = 003, // All zeroes 
  SPTE_MMAP = 004 // Mmapped file
};

^ Denotes the possible types of virtual pages.

struct vm_spte {
  void *uaddr; // Only here to act as a key
  bool writable; // Just so much easier to keep track of here 
  enum vm_spt_type type;
  int access_vector; // Currently unused

  // Used iff of type SPTE_FS or SPTE_MMAP
  struct file *file;
  off_t offset;

  // used iff of type SPTE_FS
  uint32_t read_bytes;
  uint32_t zero_bytes;
  
  // used iff of type SPTE_SWAP
  int swap_page;

  struct hash_elem elem;

  // TODO: add more data as needed here
};

^ Includes a bunch of information that might need to be had when 
faulting in a page.

---- ALGORITHMS ----

>> A2: In a few paragraphs, describe your code for locating the frame,
>> if any, that contains the data of a given page.

It's just in the page directory, so we can just use pagedir_get_page?
Did you mean the other way? For that, we keep a *uaddr member in the
frame table.

>> A3: How does your code coordinate accessed and dirty bits between
>> kernel and user virtual addresses that alias a single frame, or
>> alternatively how do you avoid the issue?

We just never use the kernel address to access memory after the initial
swapping in.

---- SYNCHRONIZATION ----

>> A4: When two user processes both need a new frame at the same time,
>> how are races avoided?

The vm system is enclosed in a lock.

---- RATIONALE ----

>> A5: Why did you choose the data structure(s) that you did for
>> representing virtual-to-physical mappings?

It's just the built-in page directory????

I used a list for the SPT because it was the easiest to work with.

		       PAGING TO AND FROM DISK
		       =======================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

I uh...do you mean the swap.h stuff? I don't even understand this 
question.

---- ALGORITHMS ----

>> B2: When a frame is required but none is free, some frame must be
>> evicted.  Describe your code for choosing a frame to evict.

>> B3: When a process P obtains a frame that was previously used by a
>> process Q, how do you adjust the page table (and any other data
>> structures) to reflect the frame Q no longer has?

We remove the frame from Q's page directory and that's pretty much all
we need to do, aside from updating the frame table entry.

>> B4: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.

---- SYNCHRONIZATION ----

>> B5: Explain the basics of your VM synchronization design.  In
>> particular, explain how it prevents deadlock.  (Refer to the
>> textbook for an explanation of the necessary conditions for
>> deadlock.)

Anything that involves the frame table is wrapped in a vm lock.

>> B6: A page fault in process P can cause another process Q's frame
>> to be evicted.  How do you ensure that Q cannot access or modify
>> the page during the eviction process?  How do you avoid a race
>> between P evicting Q's frame and Q faulting the page back in?


>> B7: Suppose a page fault in process P causes a page to be read from
>> the file system or swap.  How do you ensure that a second process Q
>> cannot interfere by e.g. attempting to evict the frame while it is
>> still being read in?

Each frame table entry has a member named 'done' which indicates whether
data is done being read into the frame. If it is false, it is never
evicted.

>> B8: Explain how you handle access to paged-out pages that occur
>> during system calls.  Do you use page faults to bring in pages (as
>> in user programs), or do you have a mechanism for "locking" frames
>> into physical memory, or do you use some other design?  How do you
>> gracefully handle attempted accesses to invalid virtual addresses?

---- RATIONALE ----

>> B9: A single lock for the whole VM system would make
>> synchronization easy, but limit parallelism.  On the other hand,
>> using many locks complicates synchronization and raises the
>> possibility for deadlock but allows for high parallelism.  Explain
>> where your design falls along this continuum and why you chose to
>> design it this way.

We used a single one for the whole VM system because screw it -- easier
implementation.

			 MEMORY MAPPED FILES
			 ===================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

  struct mapped_file {
    int id;     \\ mapid_t essentially
    struct list_elem elem; 
    void *page; \\ where the mapping begins
    int length; \\ how many pages the mapping goes on for.
  };
The above is added to struct thread. 

---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.

Essentially, when a file is memory mapped a page table entry is created that 
indicates that the memory location in question is memory mapped. Then, at a page
fault, the exception handler reads in the page from memory and memsets the 
appropriate addresses with the file data. Eviction is simple - we check the page
to see if it is dirty, and if it is we write to the appropriate position in the
file to update it with page contents. No other pages write to files, they all 
generally go into swap.

>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.

We determine all the page addresses that a new file will require, and then check
the page table in the thread's page directory to determine whether the addresses
have been used or not. If they have, then the file mapping overlaps and a -1 is
returned.

---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.

There are really a few things to think about when it comes to similarities and
differences between mmap'd mappings and data demand-paged mappings. When we need
to page in a VM page, the implementation is exactly the same from a filesystem
page or a memroy mapped page. However, paging out is different as a memory
mapped page goes right to file whereas the filesystem page gets swapped out.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the feedback survey on the course
website.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

Oh god this took so long to understand and then do. ~Ilya

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

The page_fault handler needs to align fault_addr down to the nearest 
page boundary or it won't find the right spte. For some reason I just didn't
think about this and was getting issues. ~Ilya

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?

